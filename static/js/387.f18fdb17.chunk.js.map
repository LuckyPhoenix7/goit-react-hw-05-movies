{"version":3,"file":"static/js/387.f18fdb17.chunk.js","mappings":"oNAGaA,EAAYC,EAAAA,GAAAA,EAAH,uFAOTC,GAAYD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,kJ,SCPTG,EAAe,WAC1B,OACE,UAACJ,EAAD,WAAW,8XACkE,KAC3E,SAACE,EAAD,CAAWG,GAAG,IAAd,SAAkB,+GAGvB,C,8LCRYC,EAAcL,EAAAA,GAAAA,GAAH,4DAKXM,EAAaN,EAAAA,GAAAA,GAAH,sMAWVO,EAASP,EAAAA,GAAAA,EAAH,mEAMNQ,EAAUR,EAAAA,GAAAA,EAAH,oEAMPS,EAAYT,EAAAA,GAAAA,IAAH,iE,mBChBP,SAASU,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8FAEIH,GAAW,GAFf,UAIUI,EAAAA,EAAAA,IAAWV,GAASW,MAAK,SAAAR,GAC7BC,EAAWD,EACZ,IANL,uDAQIK,GAAS,GACTI,EAAAA,GAAAA,MAAY,uHAThB,yBAWIN,GAAW,GAXf,4EADc,yBAAC,WAAD,wBAgBdO,EACD,GAAE,CAACb,KAGF,gCACGK,IAAW,SAACS,EAAA,EAAD,IACXP,IAAS,SAACf,EAAA,EAAD,IAEU,IAAnBW,EAAQY,QACP,SAACrB,EAAD,UACGS,EAAQa,KAAI,SAAAC,GAAM,OACjB,UAACtB,EAAD,YACE,UAACC,EAAD,WAAQ,WAASqB,EAAOC,WACxB,SAACrB,EAAD,UAAUoB,EAAOE,YAFFF,EAAOG,GADP,OAQrB,SAACtB,EAAD,UAAW,kOAIlB,C,mMCzDDuB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAECC,EAAQ,mCAAG,oGACCF,EAAAA,EAAAA,IAAA,qCAAwCC,IADzC,cAChBE,EADgB,yBAEfA,EAASC,KAAKC,SAFC,2CAAH,qDAKRC,EAAS,mCAAG,WAAMC,GAAN,gFACjBC,EAAS,CACbC,QAASR,EACTM,MAAAA,EACAG,eAAe,EACfC,SAAU,SALW,SAOAX,EAAAA,EAAAA,IAAU,eAAgB,CAAEQ,OAAAA,IAP5B,cAOjBL,EAPiB,yBAQhBA,EAASC,KAAKC,SARE,2CAAH,sDAWTO,EAAU,mCAAG,WAAMC,GAAN,gFAClBL,EAAS,CACbC,QAASR,EACTU,SAAU,SAHY,SAKDX,EAAAA,EAAAA,IAAA,gBAAmBa,GAAY,CAAEL,OAAAA,IALhC,cAKlBL,EALkB,yBAMjBA,EAASC,MANQ,2CAAH,sDASVU,EAAO,mCAAG,WAAMD,GAAN,gFACfL,EAAS,CACbC,QAASR,EACTU,SAAU,SAHS,SAKEX,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAuC,CAAEL,OAAAA,IAL3C,cAKfL,EALe,yBAMdA,EAASC,KAAKW,MANA,2CAAH,sDASP1B,EAAU,mCAAG,WAAMwB,GAAN,gFAClBL,EAAS,CACbC,QAASR,EACTU,SAAU,SAHY,SAKDX,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAuC,CAAEL,OAAAA,IALxC,cAKlBL,EALkB,yBAMjBA,EAASC,KAAKC,SANG,2CAAH,qD","sources":["components/ErrorMessage/ErrorMessage.styled.jsx","components/ErrorMessage/ErrorMessage.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","components/api.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const ErrorText = styled.p`\n  color: #ff0000;\n\n  text-align: center;\n  margin: 20px 0;\n`;\n\nexport const ErrorLink = styled(Link)`\n  color: #007bff;\n\n  text-decoration: none;\n  font-weight: bold;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n","import React from 'react';\nimport { ErrorText, ErrorLink } from './ErrorMessage.styled';\n\nexport const ErrorMessage = () => {\n  return (\n    <ErrorText>\n      Упс! Что-то пошло не так! Пожалуйста, перезагрузите страницу или перейдите{' '}\n      <ErrorLink to=\"/\">На главную страницу</ErrorLink>\n    </ErrorText>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nexport const ReviewItem = styled.li`\n  background-color: #f8f8f8;\n\n  padding: 15px;\n  margin-bottom: 10px;\n\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const Author = styled.p`\n  color: #007bff;\n\n  font-weight: bold;\n`;\n\nexport const Content = styled.p`\n  color: #333;\n\n  white-space: pre-line;\n`;\n\nexport const NoReviews = styled.div`\n  text-align: center;\n  padding: 20px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'components/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\nimport {\n  ReviewsList,\n  ReviewItem,\n  Author,\n  Content,\n  NoReviews,\n} from './Reviews.styled';\nimport toast from 'react-hot-toast';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    async function onFetchReviews() {\n      try {\n        setLoading(true);\n\n        await getReviews(movieId).then(reviews => {\n          setReviews(reviews);\n        });\n      } catch (error) {\n        setError(true);\n        toast.error('Упс! Что-то пошло не так!');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    onFetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <ErrorMessage />}\n\n      {reviews.length !== 0 ? (\n        <ReviewsList>\n          {reviews.map(review => (\n            <ReviewItem key={review.id}>\n              <Author>Author: {review.author}</Author>\n              <Content>{review.content}</Content>\n            </ReviewItem>\n          ))}\n        </ReviewsList>\n      ) : (\n        <NoReviews>Мы не нашли ни одной рецензии на этот фильм!</NoReviews>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'e83fa151a85aa806fd7d4370653073b9';\n\nexport const getTrend = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  return response.data.results;\n};\n\nexport const getSearch = async query => {\n  const params = {\n    api_key: KEY,\n    query,\n    include_adult: false,\n    language: 'en-US',\n  };\n  const response = await axios.get('search/movie', { params });\n  return response.data.results;\n};\n\nexport const getDetails = async movie_id => {\n  const params = {\n    api_key: KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${movie_id}`, { params });\n  return response.data;\n};\n\nexport const getCast = async movie_id => {\n  const params = {\n    api_key: KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${movie_id}/credits`, { params });\n  return response.data.cast;\n};\n\nexport const getReviews = async movie_id => {\n  const params = {\n    api_key: KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${movie_id}/reviews`, { params });\n  return response.data.results;\n};\n"],"names":["ErrorText","styled","ErrorLink","Link","ErrorMessage","to","ReviewsList","ReviewItem","Author","Content","NoReviews","Reviews","movieId","useParams","useState","reviews","setReviews","loading","setLoading","error","setError","useEffect","getReviews","then","toast","onFetchReviews","Loader","length","map","review","author","content","id","axios","KEY","getTrend","response","data","results","getSearch","query","params","api_key","include_adult","language","getDetails","movie_id","getCast","cast"],"sourceRoot":""}