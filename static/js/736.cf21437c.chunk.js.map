{"version":3,"file":"static/js/736.cf21437c.chunk.js","mappings":"8SAEaA,EAAWC,EAAAA,GAAAA,GAAH,8IAURC,EAAWD,EAAAA,GAAAA,GAAH,sLAWRE,EAAaF,EAAAA,GAAAA,IAAH,mFAOVG,EAAYH,EAAAA,GAAAA,EAAH,oEAMTI,EAAYJ,EAAAA,GAAAA,EAAH,8D,mBCtBP,SAASK,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8FAEIH,GAAW,GAFf,UAIUI,EAAAA,EAAAA,IAAQV,GAASW,MAAK,SAAAR,GAC1BC,EAAUD,EACX,IANL,uDAQIK,GAAS,GACTI,EAAAA,GAAAA,MAAY,uHAThB,yBAWIN,GAAW,GAXf,4EADc,yBAAC,WAAD,wBAgBdO,EACD,GAAE,CAACb,KAGF,gCACGK,IAAW,SAACS,EAAA,EAAD,IACXP,IAAS,SAACQ,EAAA,EAAD,KAEV,SAACtB,EAAD,UACGU,EAAOa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,KAAMC,EAA1C,EAA0CA,UAA1C,OACV,UAAC1B,EAAD,YACE,SAACC,EAAD,CACE0B,IACEJ,EAAY,yCAC0BA,GAD1B,6EAIdK,IAAKJ,KAEP,SAACtB,EAAD,UAAYuB,KACZ,UAACtB,EAAD,WAAW,cAAYuB,OAVVJ,EADL,QAiBnB,C,oGC3DYO,EAAY9B,EAAAA,GAAAA,EAAH,uFAOT+B,GAAY/B,EAAAA,EAAAA,IAAOgC,EAAAA,GAAPhC,CAAH,kJ,SCPTqB,EAAe,WAC1B,OACE,UAACS,EAAD,WAAW,8XACkE,KAC3E,SAACC,EAAD,CAAWE,GAAG,IAAd,SAAkB,+GAGvB,C,mMCTDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCAECC,EAAQ,mCAAG,oGACCF,EAAAA,EAAAA,IAAA,qCAAwCC,IADzC,cAChBE,EADgB,yBAEfA,EAASC,KAAKC,SAFC,2CAAH,qDAKRC,EAAS,mCAAG,WAAMC,GAAN,gFACjBC,EAAS,CACbC,QAASR,EACTM,MAAAA,EACAG,eAAe,EACfC,SAAU,SALW,SAOAX,EAAAA,EAAAA,IAAU,eAAgB,CAAEQ,OAAAA,IAP5B,cAOjBL,EAPiB,yBAQhBA,EAASC,KAAKC,SARE,2CAAH,sDAWTO,EAAU,mCAAG,WAAMC,GAAN,gFAClBL,EAAS,CACbC,QAASR,EACTU,SAAU,SAHY,SAKDX,EAAAA,EAAAA,IAAA,gBAAmBa,GAAY,CAAEL,OAAAA,IALhC,cAKlBL,EALkB,yBAMjBA,EAASC,MANQ,2CAAH,sDASVtB,EAAO,mCAAG,WAAM+B,GAAN,gFACfL,EAAS,CACbC,QAASR,EACTU,SAAU,SAHS,SAKEX,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAuC,CAAEL,OAAAA,IAL3C,cAKfL,EALe,yBAMdA,EAASC,KAAKU,MANA,2CAAH,sDASPC,EAAU,mCAAG,WAAMF,GAAN,gFAClBL,EAAS,CACbC,QAASR,EACTU,SAAU,SAHY,SAKDX,EAAAA,EAAAA,IAAA,gBAAmBa,EAAnB,YAAuC,CAAEL,OAAAA,IALxC,cAKlBL,EALkB,yBAMjBA,EAASC,KAAKC,SANG,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/ErrorMessage/ErrorMessage.styled.jsx","components/ErrorMessage/ErrorMessage.jsx","components/api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n\n  padding: 0;\n  list-style: none;\n`;\n\nexport const CastItem = styled.li`\n  width: 200px;\n\n  text-align: center;\n  padding: 10px;\n\n  border: 1px solid #ddd;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n`;\n\nexport const ActorImage = styled.img`\n  width: 100%;\n  height: auto;\n\n  border-radius: 10px;\n`;\n\nexport const ActorName = styled.p`\n  font-weight: bold;\n\n  margin-top: 5px;\n`;\n\nexport const Character = styled.p`\n  color: #666;\n\n  margin-top: 5px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'components/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\nimport {\n  CastList,\n  CastItem,\n  ActorImage,\n  ActorName,\n  Character,\n} from './Cast.styled';\nimport toast from 'react-hot-toast';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    async function onFetchActors() {\n      try {\n        setLoading(true);\n\n        await getCast(movieId).then(actors => {\n          setActors(actors);\n        });\n      } catch (error) {\n        setError(true);\n        toast.error('Упс! Что-то пошло не так!');\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    onFetchActors();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <ErrorMessage />}\n\n      <CastList>\n        {actors.map(({ id, profile_path, original_name, name, character }) => (\n          <CastItem key={id}>\n            <ActorImage\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n              }\n              alt={original_name}\n            />\n            <ActorName>{name}</ActorName>\n            <Character>Character: {character}</Character>\n          </CastItem>\n        ))}\n      </CastList>\n    </>\n  );\n}\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const ErrorText = styled.p`\n  color: #ff0000;\n\n  text-align: center;\n  margin: 20px 0;\n`;\n\nexport const ErrorLink = styled(Link)`\n  color: #007bff;\n\n  text-decoration: none;\n  font-weight: bold;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n","import React from 'react';\nimport { ErrorText, ErrorLink } from './ErrorMessage.styled';\n\nexport const ErrorMessage = () => {\n  return (\n    <ErrorText>\n      Упс! Что-то пошло не так! Пожалуйста, перезагрузите страницу или перейдите{' '}\n      <ErrorLink to=\"/\">На главную страницу</ErrorLink>\n    </ErrorText>\n  );\n};\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = 'e83fa151a85aa806fd7d4370653073b9';\n\nexport const getTrend = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${KEY}`);\n  return response.data.results;\n};\n\nexport const getSearch = async query => {\n  const params = {\n    api_key: KEY,\n    query,\n    include_adult: false,\n    language: 'en-US',\n  };\n  const response = await axios.get('search/movie', { params });\n  return response.data.results;\n};\n\nexport const getDetails = async movie_id => {\n  const params = {\n    api_key: KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${movie_id}`, { params });\n  return response.data;\n};\n\nexport const getCast = async movie_id => {\n  const params = {\n    api_key: KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${movie_id}/credits`, { params });\n  return response.data.cast;\n};\n\nexport const getReviews = async movie_id => {\n  const params = {\n    api_key: KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`movie/${movie_id}/reviews`, { params });\n  return response.data.results;\n};\n"],"names":["CastList","styled","CastItem","ActorImage","ActorName","Character","Cast","movieId","useParams","useState","actors","setActors","loading","setLoading","error","setError","useEffect","getCast","then","toast","onFetchActors","Loader","ErrorMessage","map","id","profile_path","original_name","name","character","src","alt","ErrorText","ErrorLink","Link","to","axios","KEY","getTrend","response","data","results","getSearch","query","params","api_key","include_adult","language","getDetails","movie_id","cast","getReviews"],"sourceRoot":""}